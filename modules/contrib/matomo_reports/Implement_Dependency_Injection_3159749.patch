diff --git a/modules/contrib/matomo_reports/src/Form/MatomoReportsSettings.php b/modules/contrib/matomo_reports/src/Form/MatomoReportsSettings.php
index 16a69f7..73a9dbf 100644
--- a/modules/contrib/matomo_reports/src/Form/MatomoReportsSettings.php
+++ b/modules/contrib/matomo_reports/src/Form/MatomoReportsSettings.php
@@ -8,12 +8,40 @@
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\matomo_reports\MatomoData;
 use GuzzleHttp\Exception\RequestException;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use GuzzleHttp\ClientInterface;
 
 /**
  * Class MatomoReportsSettings.
  */
 class MatomoReportsSettings extends ConfigFormBase {
 
+  /**
+   * The HttpClient.
+   *
+   * @var \GuzzleHttp\ClientInterface
+   */
+  protected $httpClient;
+
+  /**
+   * Constructs a MatomoReportsSettings object.
+   *
+   * @param \GuzzleHttp\ClientInterface $httpClient
+   *   The HttpClient.
+   */
+  public function __construct(ClientInterface $httpClient) {
+    $this->httpClient = $httpClient;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('http_client')
+    );
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -107,7 +135,8 @@ public function validateForm(array &$form, FormStateInterface $form_state) {
       }
       $url = $url . 'piwik.php';
       try {
-        $result = \Drupal::httpClient()->get($url);
+        // $result = \Drupal::httpClient()->get($url);
+        $result = $this->httpClient->request($url);
         if ($result->getStatusCode() != 200) {
           $form_state->setErrorByName('matomo_server_url', $this->t('The validation of "@url" failed with error "@error" (HTTP code @code).', [
             '@url' => UrlHelper::filterBadProtocol($url),
diff --git a/modules/contrib/matomo_reports/src/Form/ReportsForm.php b/modules/contrib/matomo_reports/src/Form/ReportsForm.php
index 8fd23e4..6648d7f 100644
--- a/modules/contrib/matomo_reports/src/Form/ReportsForm.php
+++ b/modules/contrib/matomo_reports/src/Form/ReportsForm.php
@@ -7,6 +7,7 @@
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\user\UserDataInterface;
 use Drupal\Core\Messenger\MessengerInterface;
+use \Drupal\Core\Config\ConfigFactoryInterface;
 
 /**
  * Class ReportsForm.
@@ -27,6 +28,13 @@ class ReportsForm extends FormBase {
    */
   protected $messenger;
 
+  /**
+   * The Config Factory.
+   *
+   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   */
+  protected $configFactory;
+
   /**
    * Constructs a new ReportsForm object.
    *
@@ -34,16 +42,20 @@ class ReportsForm extends FormBase {
    *   The user data service.
    * @param \Drupal\Core\Messenger\MessengerInterface $messenger
    *   The messenger.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   *   The config factory.
    */
-  public function __construct(UserDataInterface $user_data, MessengerInterface $messenger) {
+  public function __construct(UserDataInterface $user_data, MessengerInterface $messenger, ConfigFactoryInterface $configFactory) {
     $this->userData = $user_data;
     $this->messenger = $messenger;
+    $this->configFactory = $configFactory;
   }
 
   public static function create(ContainerInterface $container) {
     return new static(
       $container->get('user.data'),
-      $container->get('messenger')
+      $container->get('messenger'),
+      $container->get('config.factory')
     );
   }
 
@@ -58,7 +70,8 @@ public function getFormId() {
    * {@inheritdoc}
    */
   public function buildForm(array $form, FormStateInterface $form_state, array $sites = NULL) {
-    $config = \Drupal::config('matomo_reports.matomoreportssettings');
+    // $config = \Drupal::config('matomo_reports.matomoreportssettings');
+    $config = $this->configFactory->get('matomo_reports.matomoreportssettings');
     $session = $this->getRequest()->getSession();
     $allowed_sites = [];
     $allowed_keys = explode(',', $config->get('matomo_reports_allowed_sites'));
diff --git a/modules/contrib/matomo_reports/src/Plugin/Block/MatomoReportsBlock.php b/modules/contrib/matomo_reports/src/Plugin/Block/MatomoReportsBlock.php
index b0b6b97..3eb8c18 100644
--- a/modules/contrib/matomo_reports/src/Plugin/Block/MatomoReportsBlock.php
+++ b/modules/contrib/matomo_reports/src/Plugin/Block/MatomoReportsBlock.php
@@ -6,6 +6,13 @@
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\matomo_reports\MatomoData;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\Session\AccountProxyInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Entity\EntityStorageInterface;
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Drupal\Core\Render\RendererInterface;
 
 /**
  * Provides a 'MatomoReportsBlock' block.
@@ -15,7 +22,81 @@
  *  admin_label = @Translation("Matomo page statistics"),
  * )
  */
-class MatomoReportsBlock extends BlockBase {
+class MatomoReportsBlock extends BlockBase implements ContainerFactoryPluginInterface {
+
+  /**
+   * Account Proxy Interface.
+   *
+   * @var \Drupal\Core\Session\AccountProxyInterface
+   */
+  protected $currentUser;
+
+  /**
+   * The Entity Manager Interface.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * The Config Factory.
+   *
+   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   */
+  protected $configFactory;
+
+  /**
+   * The module handler service.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  protected $moduleHandler;
+
+  /**
+   * The renderer service.
+   *
+   * @var \Drupal\Core\Render\RendererInterface
+   */
+  protected $renderer;
+
+  /**
+   * Constructs a new MatomoReportsBlock object.
+   *
+   * @param \Drupal\Core\Session\AccountProxyInterface $currentUser
+   *   The current user.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entityTypeManager
+   *   The entity type manager interface.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   *   The config factory.
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   *   The module handler service.
+   * @param \Drupal\Core\Render\RendererInterface $renderer
+   *   The renderer service.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, AccountProxyInterface $currentUser, EntityTypeManagerInterface $entityTypeManager, ModuleHandlerInterface $moduleHandler, RendererInterface $renderer) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+    $this->currentUser = $currentUser;
+    $this->entityTypeManager = $entityTypeManager;
+    $this->configFactory = $configFactory;
+    $this->moduleHandler = $moduleHandler;
+    $this->renderer = $renderer;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('current_user'),
+      $container->get('entity_type.manager'),
+      $container->get('config.factory'),
+      $container->get('module_handler'),
+      $container->get('renderer')
+    );
+  }
 
   /**
    * {@inheritdoc}
@@ -37,11 +118,14 @@ protected function blockAccess(AccountInterface $account) {
    */
   public function build() {
 
-    $renderer = \Drupal::service('renderer');
-    $current_user = \Drupal::currentUser();
+    // $renderer = \Drupal::service('renderer');
+    $renderer = $this->renderer;
+    // $current_user = \Drupal::currentUser();
+    $current_user = $this->currentUser;
     $build = [];
 
-    if (!\Drupal::moduleHandler()->moduleExists('matomo')) {
+    // if (!\Drupal::moduleHandler()->moduleExists('matomo')) {
+    if (!$this->moduleHandler->moduleExists('matomo')) {
       $build['#markup'] = $this->t('To use this block, you need to install the <a href=":url">Matomo</a> module', array(':url' => 'https://www.drupal.org/project/matomo'));
       return $build;
     }
@@ -57,7 +141,8 @@ public function build() {
     }
 
     $data_params = [];
-    $data_params['idSite'] = \Drupal::config('matomo.settings')->get('site_id');
+    // $data_params['idSite'] = \Drupal::config('matomo.settings')->get('site_id');
+    $data_params['idSite'] = $this->configFactory->get('matomo.settings')->get('site_id');
     $data_params['date'] = 'today';
     $data_params['period'] = 'year';
     $data_params['module'] = 'API';
@@ -77,7 +162,8 @@ public function build() {
       'user',
       'url',
     ];
-    $renderer->addCacheableDependency($build, \Drupal\user\Entity\User::load($current_user->id()));
+    // $renderer->addCacheableDependency($build, \Drupal\user\Entity\User::load($current_user->id()));
+    $renderer->addCacheableDependency($build, $this->entityTypeManager->getStorage('user')->load($current_user->id()));
 
     return $build;
   }
