##
# Cloud Orchestrator cloud formation template.
# This template will create an EC2 instance and install
# Docker.  Cloud Orchestrator is installed installed Docker.
##
AWSTemplateFormatVersion: 2010-09-09
Description: 'Cloud Orchestrator EC2 - Docker'
Mappings:
  # The AMIs are base Ubuntu 20.04 LTS
  CloudOrchestrator:
    us-east-1:
      AMI: ami-068663a3c619dd892
    us-east-2:
      AMI: ami-0e84e211558a022c0
    us-west-1:
      AMI: ami-075fd582acf0c0128
    us-west-2:
      AMI: ami-09dd2e08d601bff67
    ap-east-1:
      AMI: ami-9ccc8aed
    ap-south-1:
      AMI: ami-0c5b1a88222ac79cb
    ap-northeast-1:
      AMI: ami-0c1ac8728ef7f87a4
    ap-northeast-2:
      AMI: ami-0de407404c33d1671
    ap-northeast-3:
      AMI: ami-0e319adbbd61f8b6f
    ap-southeast-1:
      AMI: ami-0b8cf0f359b1335e1
    ap-southeast-2:
      AMI: ami-0a1a4d97d4af3009b
    ca-central-1:
      AMI: ami-08a6203f59f9df866
    eu-central-1:
      AMI: ami-05c26ae4789875080
    eu-west-1:
      AMI: ami-0dad359ff462124ca
    eu-west-2:
      AMI: ami-0917237b4e71c5759
    eu-west-3:
      AMI: ami-0e60c6afa19d896ee
    eu-north-1:
      AMI: ami-0d4e2b57f569e9daa
    eu-south-1:
      AMI: ami-0b74d52f736d963d1
    sa-east-1:
      AMI: ami-001c16a3a4f5d85f1
    me-south-1:
      AMI: ami-09cbb7fde4a0edad0
    af-south-1:
      AMI: ami-033b88f80930a0f7a
Parameters:
  StackPrefix:
    Type: String
    Description: >-
      A prefix to append to resource names/IDs. For example, ${StackPrefix}-IAM-Role,
      ${StackPrefix}-Drupal-RDS for RDS DB Identifier.
      Must be between 1 and 20 characters and only contain alphanumeric characters
      and hyphens.
    MinLength: '1'
    MaxLength: '20'
    AllowedPattern: '[a-zA-Z0-9\\-]*'
  IAMInstanceProfile:
    Description: IAM Instance Profile Name
    Type: String
  KeyName:
    Description: Name of an existing EC2 key pair to SSH access into the EC2 instance.
    Type: String
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: The EC2 instance type.
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  DrupalUserName:
    Default: cloud_admin
    Description: >-
      The Drupal admin account username. Must be between 5 and 16 characters and
      only contain alphanumeric characters and underscores.
    Type: String
    MinLength: '5'
    MaxLength: '16'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9_]*"
    NoEcho: 'false'
    ConstraintDescription: >-
      Must only contain alphanumeric characters, underscores
      and must be between 5 and 16 characters long.
  DrupalPassword:
    Type: String
    Description: >-
      The Drupal admin account password. Must be between 6 and 32 characters and
      only contain alphanumeric characters and these special
      characters '_'`~!#$%^&*()_+,-.
    NoEcho: 'true'
    MinLength: '6'
    MaxLength: '32'
    AllowedPattern: '^([a-z0-9A-Z`~!#$%^&*()_+,.\\-])*$'
    ConstraintDescription: >-
      Your Drupal password must be between 6 and 32 characters and be
      letters (upper or lower), numbers, and these special characters '_'`~!#$%^&*()_+,- .
  DrupalEmail:
    Description: Drupal site administrator email.
    Type: String
    AllowedPattern: "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"
    ConstraintDescription: Must be a valid email address.
  PublicSubnet1:
    Description: Public Subnet 1
    Type: String
  EC2SecurityGroup:
    Description: EC2 Security Group
    Type: String
  MySQLUserName:
    Description: >-
      Username for the RDS. Must be between 5 and 16 characters and only contain
      alphanumeric characters and underscores.
    Default: administrator
    Type: String
    NoEcho: 'false'
    MinLength: '5'
    MaxLength: '16'
    AllowedPattern: "[a-zA-Z0-9_]*"
    ConstraintDescription: >-
      Must contain only alphanumeric characters, underscores
      and must be between 5 and 16 characters long.
  MySQLPassword:
    Description: >-
      Password for the RDS Username.  Must be between 6 and 32 characters and
      only contain alphanumeric characters and these special
      characters '_'`~!#$%^&*()_+,-.
    Type: String
    MinLength: '6'
    MaxLength: '32'
    AllowedPattern: '^([a-z0-9A-Z`~!#$%^&*()_+,.\\-])*$'
    ConstraintDescription: >-
      Your MySQLPassword must be letters (upper or lower),
      numbers, and these special characters '_'`~!#$%^&*()_+,-.
    NoEcho: 'true'
  DatabaseName:
    Description: >-
      The name of the database. Must be between 4 and 32 characters and
      only contain alphanumeric characters and underscores.
    Type: String
    Default: cloud_orchestrator
    AllowedPattern: '[a-zA-Z0-9_]*'
    MinLength: '4'
    MaxLength: '32'
    ConstraintDescription: >-
      Your database name must be between 4 and 32 characters and
      contain alphanumeric characters and underscores.
  CloudOrchestratorVersion:
    Description: Version of the Cloud Orchestrator to install.
    Default: 8.2.0
    Type: String
    AllowedValues:
      - 8.2.0
      - 8.2.0-rc2
      - 8.2.0-rc1
      - 8.1.1
      - 8.1.2-beta1
      - dev-8.x-2.x
      - dev-8.x-1.x
      - 3.x-dev
Resources:
  EC2:
    Type: 'AWS::EC2::Instance'
    Properties:
      DisableApiTermination: false
      EbsOptimized: false
      IamInstanceProfile: !Ref IAMInstanceProfile
      ImageId: !FindInMap
        - CloudOrchestrator
        - !Ref 'AWS::Region'
        - AMI
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      Monitoring: false
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref EC2SecurityGroup
      Tenancy: default
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -xe

              # Basic package installation
              HOME='/home/ubuntu'
              CO_DIR="$HOME/cloud_orchestrator"
              DOCKER_DIR="/var/www/cloud_orchestrator"

              export DEBIAN_FRONTEND=noninteractive
              apt-get update -yq
              apt-get upgrade -yq
              apt-get -yq install \
                php-cli php-mbstring php-xml php-gd \
                apt-transport-https ca-certificates \
                curl software-properties-common \
                zip unzip

              sudo php -r "copy('https://getcomposer.org/installer', '/tmp/composer-setup.php');"
              sudo php /tmp/composer-setup.php  --install-dir /usr/local/bin --filename composer

              sudo -u ubuntu composer create-project docomoinnovations/cloud_orchestrator:${CloudOrchestratorVersion} $CO_DIR
              sudo chown -R ubuntu:ubuntu $CO_DIR

              FILES_DIR=$CO_DIR/files
              MARIADB_DIR=$CO_DIR/mariadb
              mkdir -p $FILES_DIR
              mkdir -p $CO_DIR/config/sync
              mkdir -p $MARIADB_DIR

              SETTINGS_FILE=$CO_DIR/docroot/sites/default/settings.php
              sudo tee -a $SETTINGS_FILE > /dev/null <<EOF
              \$settings['file_private_path'] = '/var/www/cloud_orchestrator/files';
              EOF

              # Setup the docker
              curl -fsSL get.docker.com -o /tmp/get-docker.sh
              sudo sh /tmp/get-docker.sh
              sudo usermod -aG docker ubuntu
              sudo systemctl enable docker
              sudo systemctl enable docker

              sudo docker pull memcached
              docker run --name cloud-orchestrator-memcache -d memcached

              sudo docker pull mariadb
              sudo docker run -e MYSQL_ROOT_PASSWORD=${MySQLUserName} \
                -e MYSQL_DATABASE=${DatabaseName} \
                -e MYSQL_USER=${MySQLUserName} \
                -e MYSQL_PASSWORD=${MySQLPassword} \
                -v $MARIADB_DIR:/var/lib/mysql \
                -d --name mariadb mariadb

              # Run the cloud orchestrator docker installer
              IMAGE_TAG=docomoinnovations/cloud_orchestrator
              CONTAINER_NAME=cloud-orchestrator
              DOCKER_FILE_URL=https://cloud-orchestrator.s3.amazonaws.com/docker/Dockerfile
              sudo docker build -t $IMAGE_TAG $DOCKER_FILE_URL

              sudo docker run --name $CONTAINER_NAME --link mariadb:mysql \
              --link cloud-orchestrator-memcache:memcache \
              -p 80:80 -d -v $CO_DIR:$DOCKER_DIR $IMAGE_TAG

              # Install Cloud Orchestrator using Drush
              sudo docker exec -w $DOCKER_DIR $CONTAINER_NAME sh -c "drush si -y \
              --db-url=mysql://${MySQLUserName}:${MySQLPassword}@mysql:3306/${DatabaseName} \
              --account-name=${DrupalUserName} \
              --account-pass=${DrupalPassword} \
              --site-name=\"Cloud Orchestrator\" \
              --account-mail=${DrupalEmail} \
              cloud_orchestrator \
              cloud_orchestrator_module_configure_form.cloud_service_providers.aws_cloud=aws_cloud \
              cloud_orchestrator_module_configure_form.cloud_service_providers.k8s=k8s"

              sudo docker exec -w $DOCKER_DIR $CONTAINER_NAME sh -c "chown -R www-data:www-data $DOCKER_DIR/files"
              sudo docker exec -w $DOCKER_DIR $CONTAINER_NAME sh -c "chown -R www-data:www-data $DOCKER_DIR/docroot/sites/default/files"

              # Switch to Claro Admin
              sudo docker exec -w $DOCKER_DIR $CONTAINER_NAME sh -c "drush en -y claro"
              sudo docker exec -w $DOCKER_DIR $CONTAINER_NAME sh -c "drush cset -y system.theme admin claro"

              sudo docker exec -w $DOCKER_DIR $CONTAINER_NAME sh -c "composer require drupal/memcache"
              sudo docker exec -w $DOCKER_DIR $CONTAINER_NAME sh -c "drush en -y memcache memcache_admin"
              sudo docker exec -w $DOCKER_DIR $CONTAINER_NAME sh -c "drush -y cr"

              sudo tee -a $SETTINGS_FILE > /dev/null <<EOF
              \$settings['memcache']['servers'] = ['memcache:11211' => 'default'];
              \$settings['memcache']['bins'] = ['default' => 'default'];
              \$settings['memcache']['key_prefix'] = '';
              \$settings['cache']['default'] = 'cache.backend.memcache';
              EOF
              sudo docker exec -w $DOCKER_DIR $CONTAINER_NAME sh -c "drush -y cr"
              { sudo -u ubuntu echo "*/5 * * * * sudo docker exec -w /var/www/cloud_orchestrator cloud-orchestrator sh -c 'drush cron' /dev/null 2>&1 "; } | crontab -

            - {
                MySQLUserName: !Ref MySQLUserName,
                MySQLPassword: !Ref MySQLPassword,
                DrupalUserName: !Ref DrupalUserName,
                DrupalPassword: !Ref DrupalPassword,
                DatabaseName: !Ref DatabaseName,
                DrupalEmail: !Ref DrupalEmail,
                CloudOrchestratorVersion: !Ref CloudOrchestratorVersion
              }
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Name
          Value: !Sub
            - '${StackPrefix} Drupal Instance'
            - StackPrefix: !Ref StackPrefix
Outputs:
  EC2InstanceName:
    Value: !Sub
      - '${StackPrefix} Drupal Instance'
      - StackPrefix: !Ref StackPrefix
  DrupalUrl:
    Value:
      !Sub
        - 'http://${PublicIp}'
        - { PublicIp: !GetAtt EC2.PublicIp }
  DrupalUserName:
    Value: !Ref DrupalUserName
  DrupalPassword:
    Value: !Ref DrupalPassword
  DrupalEmail:
    Value: !Ref DrupalEmail
  SSHAccess:
    Value:
      !Sub
        - 'ssh ubuntu@${PublicIp}'
        - { PublicIp: !GetAtt EC2.PublicIp }
