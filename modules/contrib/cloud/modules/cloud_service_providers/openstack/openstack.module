<?php

/**
 * @file
 * OpenStack module.
 *
 * This module handles UI interactions with the OpenStack.
 */

use Drupal\aws_cloud\Service\Ec2\Ec2Service;
use Drupal\cloud\Entity\CloudConfig;
use Drupal\cloud\Entity\CloudServerTemplate;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Database\Query\Condition;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\file\Entity\File;

/**
 * Implements hook_help().
 */
function openstack_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.openstack':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module creates a user interface for managing OpenStack, which is depending on AWS Cloud (aws_cloud) module working with a Drupal service (EC2Service).') . '</p>';
      $output .= '<h3>' . t('Features') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('<strong>OpenStack</strong>');
      $output .= '<ul>';
      $output .= '<li>' . t('Manage OpenStack.') . '</li>';
      $output .= '<li>' . t('Support OpenStack launch templates.') . '</li>';
      $output .= '</ul></li></ul>';
      $output .= '<p>' . t('For more information, see the <a href=":cloud_documentation">online documentation for the OpenStack module</a>.', [':cloud_documentation' => 'https://www.drupal.org/docs/8/modules/cloud']) . '</p>';

      return $output;
  }
}

/**
 * Implements hook_cron().
 */
function openstack_cron() {
  $openstack_ec2_service = \Drupal::service('openstack.ec2');

  $entities = \Drupal::service('plugin.manager.cloud_config_plugin')->loadConfigEntities('openstack');
  foreach ($entities ?: [] as $entity) {
    $openstack_ec2_service->setCloudContext($entity->getCloudContext());
    $openstack_ec2_service->createResourceQueueItems();
  }
  Ec2Service::clearCacheValue();
}

/**
 * Update OpenStack resources.
 *
 * @param \Drupal\cloud\Entity\CloudConfig $cloud_config
 *   The cloud service provider (CloudConfig) object.
 */
function openstack_update_resources(CloudConfig $cloud_config) {
  /* @var \Drupal\openstack\Service\OpenStackEc2Service $openstack_ec2_service */
  $openstack_ec2_service = \Drupal::service('openstack.ec2');
  $openstack_ec2_service->setCloudContext($cloud_config->getCloudContext());

  $openstack_ec2_service->updateInstances();
  $openstack_ec2_service->updateImages();
  $openstack_ec2_service->updateKeyPairs();
  $openstack_ec2_service->updateSecurityGroups();
  $openstack_ec2_service->updateVolumes();
  $openstack_ec2_service->updateSnapshots();
  $openstack_ec2_service->updateNetworkInterfaces();
  $openstack_ec2_service->updateFloatingIp();
}

/**
 * Implements hook_cloud_config_presave().
 */
function openstack_cloud_config_presave(CloudConfig $cloud_config) {
  if ($cloud_config->bundle() === 'openstack') {
    if ($cloud_config->isNew()) {
      // Auto generate the cloud_context.
      $cloud_context = aws_cloud_form_cloud_config_aws_cloud_add_form_create_cloud_context(
        $cloud_config->getName(),
        $cloud_config->get('field_os_region')->value
      );
      $cloud_config->set('cloud_context', $cloud_context);
    }
    else {
      $cloud_context = $cloud_config->get('cloud_context')->value;
    }
    $access_key = $cloud_config->get('field_access_key')->value;
    $secret_key = $cloud_config->get('field_secret_key')->value;

    if (!empty($cloud_config->get('field_access_key')->value) && !empty($cloud_config->get('field_secret_key')->value)) {
      // Create credential_file.
      aws_cloud_create_credential_file($cloud_context, $access_key, $secret_key);

      $cloud_config->set('field_access_key', NULL);
      $cloud_config->set('field_secret_key', NULL);
    }
  }
}

/**
 * Implements hook_cloud_config_delete().
 */
function openstack_cloud_config_delete(CloudConfig $cloud_config) {
  if ($cloud_config->bundle() === 'openstack') {
    /* @var \Drupal\openstack\Service\OpenStackEc2Service $openstack_ec2_service */
    $openstack_ec2_service = \Drupal::service('openstack.ec2');
    $openstack_ec2_service->setCloudContext($cloud_config->getCloudContext());
    $openstack_ec2_service->clearAllEntities();

    // Clean up credential files.
    $credential_file = aws_cloud_ini_file_path($cloud_config->get('cloud_context')->value);
    \Drupal::service('file_system')->delete($credential_file);
    Ec2Service::clearCacheValue();
  }
}

/**
 * Implements hook_cloud_config_update().
 */
function openstack_cloud_config_update(CloudConfig $cloud_config) {
  if ($cloud_config->bundle() === 'openstack') {
    openstack_update_resources($cloud_config);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openstack_form_cloud_config_openstack_add_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'openstack_form_cloud_config_openstack_credentials_validate';
  $form['#validate'][] = 'openstack_form_cloud_config_openstack_cloud_context_validate';

  // Get Form inputs.
  $form_inputs = $form_state->getUserInput();
  $access_key = $form_inputs['field_access_key'][0]['value'] ?? '';
  $secret_key = $form_inputs['field_secret_key'][0]['value'] ?? '';

  // Call region validate function if access key and secret key is not empty.
  if (!empty($access_key) && !empty($secret_key)) {
    $form['#validate'][] = 'openstack_form_cloud_config_openstack_region_validate';
  }

  openstack_form_cloud_config_openstack_form_common_alter($form, $form_state, $form_id);

  $form['cloud_provider']['cloud_context']['#access'] = FALSE;
  $form['actions']['submit']['#submit'][] = 'openstack_form_cloud_config_openstack_add_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openstack_form_cloud_config_openstack_edit_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'openstack_form_cloud_config_openstack_credentials_validate';

  // Get Form inputs.
  $form_inputs = $form_state->getUserInput();
  $access_key = $form_inputs['field_access_key'][0]['value'] ?? '';
  $secret_key = $form_inputs['field_secret_key'][0]['value'] ?? '';

  // Call region validate function if access key and secret key is not empty.
  if (!empty($access_key) && !empty($secret_key)) {
    $form['#validate'][] = 'openstack_form_cloud_config_openstack_region_validate';
  }

  openstack_form_cloud_config_openstack_form_common_alter($form, $form_state, $form_id);
}

/**
 * Common alter function.
 *
 * @param array &$form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param string $form_id
 *   The Form Id.
 */
function openstack_form_cloud_config_openstack_form_common_alter(array &$form, FormStateInterface $form_state, $form_id) {
  // Set the default Openstack icon.
  $config = \Drupal::config('openstack.settings');
  $default_image = $config->get('openstack_cloud_config_icon');
  if ($default_image) {
    $file = File::load($default_image);
    $image = \Drupal::service('image.factory')->get($file->getFileUri());
    $form['image']['widget'][0]['#default_image'] = [
      'fid' => $default_image,
      'width' => $image->getWidth(),
      'height' => $image->getHeight(),
    ];
  }

  openstack_cloud_config_fieldsets($form);

  $form['new_revision']['#access'] = FALSE;
  $form['revision_log_message']['#access'] = FALSE;
  $form['status']['#access'] = FALSE;
}

/**
 * Implements hook_default_cloud_config_icon().
 */
function openstack_default_cloud_config_icon(EntityInterface $entity) {
  // Provides the calling hook with the default aws icon.
  if ($entity->bundle() === 'openstack') {
    $config = \Drupal::config('openstack.settings');
    return $config->get('openstack_cloud_config_icon');
  }
}

/**
 * Submit function to set the redirect to update openstack resources.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function openstack_form_cloud_config_openstack_add_form_submit(array $form, FormStateInterface $form_state) {
  $cloud_config = $form_state->getFormObject()->getEntity();
  $form_state->setRedirect(
    'entity.openstack.update_all',
    [],
    [
      'query' =>
        [
          'regions' => $cloud_config->getCloudContext(),
        ],
    ]);
}

/**
 * Validate access key, secret key.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function openstack_form_cloud_config_openstack_credentials_validate(array &$form, FormStateInterface $form_state) {
  $access_key = $form_state->getValue('field_access_key');
  $secret_key = $form_state->getValue('field_secret_key');

  if (empty($access_key[0]['value'])) {
    $form_state->setErrorByName(
      'field_access_key',
      t('Access key ID required.')
    );
  }
  if (empty($secret_key[0]['value'])) {
    $form_state->setErrorByName(
      'field_secret_key',
      t('Secret access key required.')
    );
  }

}

/**
 * Validate duplicate cloud_context.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function openstack_form_cloud_config_openstack_cloud_context_validate(array &$form, FormStateInterface $form_state) {
  $name = $form_state->getValue('name')[0]['value'];
  $cloud_context_exists = \Drupal::service('cloud')->cloudContextExists($name);
  if ($cloud_context_exists === TRUE) {
    $form_state->setErrorByName(
      'name',
      t('The cloud service providers have existed with the same cloud service provider.')
    );
  }
}

/**
 * Validate region name configuration.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function openstack_form_cloud_config_openstack_region_validate(array &$form, FormStateInterface $form_state) {
  $region_name = $form_state->getValue('field_os_region')[0]['value'];
  $api_endpoint = $form_state->getValue('field_api_endpoint')[0]['value'] ?? '';
  $name = $form_state->getValue('name')[0]['value'] ?? '';
  $access_key = $form_state->getValue('field_access_key')[0]['value'] ?? '';
  $secret_key = $form_state->getValue('field_secret_key')[0]['value'] ?? '';
  $cloud_context = aws_cloud_form_cloud_config_aws_cloud_add_form_create_cloud_context($name, $region_name);

  $credentials = [];
  $credentials['endpoint'] = $api_endpoint;
  $credentials['region'] = $region_name;
  $credentials['version'] = 'latest';
  $credentials['env'] = [
    'access_key' => $access_key,
    'secret_key' => $secret_key,
  ];

  $region_name_response = openstack_form_cloud_config_openstack_get_region($credentials);

  // Validate region.
  if (!empty($region_name_response) && !in_array($region_name, $region_name_response)) {
    $form_state->setErrorByName(
      'field_os_region',
      t('Region is invalid. Please enter valid region.')
    );
  }
}

/**
 * Get Regions from API.
 *
 * @param array $credentials
 *   The array of credentials.
 *
 * @return array
 *   An array of regions.
 */
function openstack_form_cloud_config_openstack_get_region(array $credentials = []) {
  $response = \Drupal::service('openstack.ec2')->describeRegions([], $credentials);

  $region_name_response = [];
  foreach ($response['Regions'] ?: [] as $regions) {
    $region_name_response[] = $regions['RegionName'];
  }

  return $region_name_response;
}

/**
 * Get fieldsets of cloud config page.
 *
 * @param array $fields
 *   Array of fields.
 */
function openstack_cloud_config_fieldsets(array &$fields) {
  $fieldset_defs = [
    [
      'name' => 'cloud_provider',
      'title' => t('Cloud Service Provider'),
      'open' => TRUE,
      'fields' => [
        'cloud_context',
        'name',
        'image',
      ],
    ],
    [
      'name' => 'credentials',
      'title' => t('Credentials'),
      'open' => TRUE,
      'fields' => [
        'field_account_id',
        'field_api_endpoint',
        'field_os_region',
        'field_access_key',
        'field_secret_key',
      ],
    ],
    [
      'name' => 'location',
      'title' => t('Location'),
      'open' => TRUE,
      'fields' => [
        'cloud_config_location_map',
        'field_location_country',
        'field_location_city',
        'field_location_latitude',
        'field_location_longitude',
      ],
    ],
    [
      'name' => 'others',
      'title' => t('Others'),
      'open' => FALSE,
      'fields' => [
        'uid',
      ],
    ],
  ];

  \Drupal::service('cloud')->reorderForm($fields, $fieldset_defs);
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 */
function openstack_cloud_config_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->bundle() === 'openstack') {
    $map_json_url = \Drupal::config('cloud.settings')->get('cloud_custom_location_map_json_url');
    $url = Url::fromRoute('entity.cloud_config.location', ['cloud_config' => $entity->id()])->toString();

    $build['cloud_config_location_map'] = [
      '#markup' => '<div id="cloud_config_location"></div>',
      '#attached' => [
        'library' => [
          'cloud/cloud_config_location',
        ],
        'drupalSettings' => [
          'cloud' => [
            'cloud_location_map_json_url' => $map_json_url,
            'cloud_config_location_json_url' => $url,
          ],
        ],
      ],
    ];

    $build['field_location_country']['#access'] = FALSE;
    $build['field_location_city']['#access'] = FALSE;
    $build['field_location_longitude']['#access'] = FALSE;
    $build['field_location_latitude']['#access'] = FALSE;

    openstack_cloud_config_fieldsets($build);

  }
}

/**
 * Implements hook_form_alter().
 */
function openstack_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'views_form_openstack_') === 0) {
    $form['#submit'][] = 'cloud_views_bulk_form_submit';
  }

  if ($form['#id'] === 'views-exposed-form-openstack-image-list') {
    $form['visibility']['#options'][1] = t('Public');
    $form['visibility']['#options'][0] = t('Private');
  }
}

/**
 * Implements hook_entity_view().
 */
function openstack_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if (!empty($entity) && $view_mode === 'full'
  && $entity->getEntityTypeId() === 'openstack_key_pair'
  && $entity->id() !== NULL) {
    $keypair = \Drupal::entityTypeManager()->getStorage('openstack_key_pair')->load($entity->id());

    // If the key is on the server, prompt user to download it.
    if (!empty($keypair) && !empty($keypair->getKeyFileLocation())) {
      $url = Url::fromRoute('entity.openstack_key_pair.download', ['cloud_context' => $keypair->getCloudContext(), 'key_pair' => $keypair->id()])->toString();
      \Drupal::messenger()->addWarning(t('<a href="@download_link">Download private key</a>.  Once downloaded, the key will be deleted from the server.',
        ['@download_link' => $url]
      ));
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function openstack_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getEntityTypeId() === 'cloud_server_template' && $entity->bundle() === 'openstack') {
    \Drupal::service('cloud')->reorderForm($build, openstack_server_template_field_orders(FALSE));
    $build['#attached']['library'][] = 'aws_cloud/aws_cloud_view_builder';
  }
}

/**
 * Set dynamic allowed values for the alignment field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function openstack_image_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {

  $allowed_values = [];

  if (!empty($entity) && $entity->bundle() === 'openstack') {
    if ($entity->isNew() && $entity->bundle() === 'openstack') {
      $route = \Drupal::routeMatch();
      $cloud_context = $route->getParameter('cloud_context');
    }
    else {
      $cloud_context = $entity->getCloudContext();
    }

    try {
      $entity_type = 'openstack_image';
      $images = \Drupal::entityTypeManager()
        ->getStorage($entity_type)
        ->loadByProperties(
          ['cloud_context' => $cloud_context]
        );

      foreach ($images ?: [] as $image) {
        $image_id = $image->getImageId();
        $name = $image->getName() ?? $image_id;
        $allowed_values[$image_id] = sprintf('%s (%s)', $name, $image_id);
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('openstack')->debug('No cloud context specified.');
    }
  }

  return $allowed_values;
}

/**
 * Set dynamic allowed values for the alignment field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function openstack_availability_zone_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {

  /* @var \Drupal\openstack\Service\OpenStackEc2Service $ec2Service */
  $ec2Service = \Drupal::service('openstack.ec2');
  $availability_zones = [];

  if (!empty($entity) && $entity->bundle() === 'openstack') {
    try {
      if ($entity->isNew()) {
        $route = \Drupal::routeMatch();
        $cloud_context = $route->getParameter('cloud_context');
      }
      else {
        $cloud_context = $entity->getCloudContext();
      }
      $ec2Service->setCloudContext($cloud_context);
      $availability_zones = $ec2Service->getAvailabilityZones();
    }
    catch (\Exception $e) {
      \Drupal::logger('openstack')->debug('No cloud context specified.');
    }
  }

  return $availability_zones;
}

/**
 * Set dynamic allowed values for the VPC field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function openstack_vpc_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $allowed_values = [];
  if (!empty($entity) && $entity->bundle() === 'openstack') {
    $ec2_service = \Drupal::service('openstack.ec2');
    if ($entity->isNew() && $entity->bundle() === 'openstack') {
      $route = \Drupal::routeMatch();
      $cloud_context = $route->getParameter('cloud_context');
    }
    else {
      $cloud_context = $entity->getCloudContext();
    }

    if (empty($cloud_context)) {
      return $allowed_values;
    }

    try {
      $ec2_service->setCloudContext($cloud_context);

      $response = $ec2_service->describeVpcs();
      if (empty($response['Vpcs'])) {
        return $allowed_values;
      }

      foreach ($response['Vpcs'] ?: [] as $vpc) {
        $vpc_id = $vpc['VpcId'];
        $name = $vpc_id;
        if (isset($vpc['Tags'])) {
          foreach ($vpc['Tags'] ?: [] as $tag) {
            if ($tag['Key'] === 'Name') {
              $name = $tag['Value'];
              break;
            }
          }
        }

        $allowed_values[$vpc_id] = sprintf('%s (%s)', $name, $vpc_id);
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('openstack')->debug('No cloud context specified.');
    }
  }

  return $allowed_values;
}

/**
 * Set dynamic allowed values for the subnet field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function openstack_subnet_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $allowed_values = [];
  if (!empty($entity) && $entity->bundle() === 'openstack') {
    $allowed_values = openstack_get_subnet_options_by_vpc_id(NULL, $entity);
  }

  return $allowed_values;
}

/**
 * Common alter function for edit and add forms.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param string $form_id
 *   The Form Id.
 */
function openstack_form_cloud_server_template_openstack_form_common_alter(array &$form, FormStateInterface $form_state, $form_id) {
  \Drupal::service('cloud')->reorderForm($form, openstack_server_template_field_orders());

  $form['instance']['field_instance_type']['widget']['#default_value'] = ['m1.nano'];
  $form['instance']['field_instance_type']['#access'] = FALSE;

  $form['network']['field_openstack_vpc']['widget']['#ajax'] = [
    'callback' => 'openstack_ajax_callback_get_fields',
  ];

  $vpc_id = '_none';
  if (!empty($form['network']['field_openstack_vpc']['widget']['#default_value'])) {
    $vpc_id = $form['network']['field_openstack_vpc']['widget']['#default_value'][0];
  }

  // If validation happened, we should get vpc_id from user input.
  $user_input = $form_state->getUserInput();
  if (isset($user_input['field_openstack_vpc'])) {
    $vpc_id = $user_input['field_openstack_vpc'];
  }

  $subnet_options = openstack_get_subnet_options_by_vpc_id($vpc_id, $form_state->getFormObject()->getEntity());
  $form['#attached']['library'][] = 'openstack/openstack_form';
  $form['#attached']['drupalSettings']['openstack']['field_openstack_subnet_default_values']
    = array_keys($subnet_options);

  $security_group_options = openstack_get_security_group_options_by_vpc_id($vpc_id);
  $security_group_default_values = [];
  foreach ($security_group_options ?: [] as $id => $security_group_option) {
    $security_group_default_values[] = (string) $id;
  }

  $form['#attached']['drupalSettings']['openstack']['field_openstack_security_group_default_values']
    = $security_group_default_values;

  // Hide labels of field_tags.
  $form['tags']['field_tags']['widget']['#title'] = NULL;
}

/**
 * Ajax callback function to get fields(subnet, security group).
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   Returns the data back as AjaxResponse object.
 */
function openstack_ajax_callback_get_fields(array $form, FormStateInterface $form_state) {
  $vpc_id = $form['network']['field_openstack_vpc']['widget']['#value'];

  // Field subnet.
  $field_subnet = $form['network']['field_openstack_subnet'];
  $field_subnet['#id'] = 'edit-field-openstack-subnet-wrapper';
  $field_subnet['widget']['#options'] = openstack_get_subnet_options_by_vpc_id(
    $vpc_id,
    $form_state->getFormObject()->getEntity()
  );

  $response = new AjaxResponse();
  $response->addCommand(
    new ReplaceCommand('#edit-field-openstack-subnet-wrapper',
    \Drupal::service('renderer')->render($field_subnet))
  );

  // Field security group.
  $field_security_group = $form['network']['field_openstack_security_group'];
  $field_security_group['#id'] = 'edit-field-openstack-security-group-wrapper';
  $field_security_group['widget']['#options'] = openstack_get_security_group_options_by_vpc_id($vpc_id);

  $response->addCommand(
    new ReplaceCommand('#edit-field-openstack-security-group-wrapper',
    \Drupal::service('renderer')->render($field_security_group))
  );

  return $response;
}

/**
 * Get options of field subnet belongs to vpc.
 *
 * @param string $vpc_id
 *   The VPC ID.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity Instance of EntityInterface.
 *
 * @return array
 *   An array of options.
 */
function openstack_get_subnet_options_by_vpc_id($vpc_id, EntityInterface $entity) {

  $options = [];
  if ($vpc_id === '_none') {
    return $options;
  }

  try {
    $ec2_service = \Drupal::service('openstack.ec2');
    if ($entity->isNew()) {
      $route = \Drupal::routeMatch();
      $cloud_context = $route->getParameter('cloud_context');
    }
    else {
      $cloud_context = $entity->getCloudContext();
    }
    $ec2_service->setCloudContext($cloud_context);

    $params = [];
    if ($vpc_id !== NULL) {
      $params['Filters'] = [
        [
          'Name' => 'vpc-id',
          'Values' => [$vpc_id],
        ],
      ];
    }
    $response = $ec2_service->describeSubnets($params);

    foreach ($response['Subnets'] ?: [] as $subnet) {
      $subnet_id = $subnet['SubnetId'];
      $name = $subnet_id;
      if (isset($subnet['Tags'])) {
        foreach ($subnet['Tags'] ?: [] as $tag) {
          if ($tag['Key'] === 'Name') {
            $name = $tag['Value'];
            break;
          }
        }
      }
      $options[$subnet_id] = sprintf('%s (%s)', $name, $subnet_id);
    }
  }
  catch (\Exception $e) {
    \Drupal::logger('openstack')->debug('No cloud context specified.');
  }

  return $options;
}

/**
 * Get options of field security group belongs to vpc.
 *
 * @param string $vpc_id
 *   The VPC ID.
 *
 * @return array
 *   An array of options.
 */
function openstack_get_security_group_options_by_vpc_id($vpc_id) {
  $options = [];

  if ($vpc_id === '_none') {
    return $options;
  }

  $entity_storage = \Drupal::entityTypeManager()->getStorage('openstack_security_group');
  $entity_ids = $entity_storage
    ->getQuery()
    ->condition('vpc_id', $vpc_id)
    ->execute();
  $security_groups = $entity_storage->loadMultiple($entity_ids);
  foreach ($security_groups ?: [] as $security_group) {
    $options[$security_group->id()] = $security_group->getGroupName();
  }

  return $options;
}

/**
 * Implements hook_query_TAG_Alter().
 */
function openstack_query_openstack_image_views_access_alter(AlterableInterface $query) {
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }
  if ($account->hasPermission('view any openstack image')) {
    return;
  }
  else {
    // Add a uid condition and let users view public images.
    $or = new Condition('OR');
    $or->condition('openstack_image.uid', $account->id())
      ->condition('openstack_image.visibility', TRUE);
    $query->condition($or);
  }

}

/**
 * Implements hook_query_TAG_Alter().
 */
function openstack_query_openstack_key_pair_views_access_alter(AlterableInterface $query) {
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }
  if ($account->hasPermission('view any openstack key pair')) {
    return;
  }
  else {
    $query->condition('openstack_key_pair.uid', $account->id());
  }

}

/**
 * Implements hook_query_TAG_Alter().
 */
function openstack_query_openstack_network_interface_views_access_alter(AlterableInterface $query) {
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }
  if ($account->hasPermission('view any openstack image')) {
    return;
  }
  else {
    // Add a uid condition.
    $query->condition('openstack_network_interface.uid', $account->id());
  }

}

/**
 * Implements hook_query_TAG_Alter().
 */
function openstack_query_openstack_security_group_views_access_alter(AlterableInterface $query) {
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }
  if ($account->hasPermission('view any openstack security group')) {
    return;
  }
  else {
    // Add a uid condition.
    $query->condition('openstack_security_group.uid', $account->id());
  }

}

/**
 * Implements hook_query_TAG_Alter().
 */
function openstack_query_openstack_snapshot_views_access_alter(AlterableInterface $query) {
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }
  if ($account->hasPermission('view any openstack snapshot')) {
    return;
  }
  else {
    // Add a uid condition.
    $query->condition('openstack_snapshot.uid', $account->id());
  }
}

/**
 * Implements hook_query_TAG_Alter().
 */
function openstack_query_openstack_volume_views_access_alter(AlterableInterface $query) {
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }
  if ($account->hasPermission('view any openstack volume')) {
    return;
  }
  else {
    // Add a uid condition.
    $query->condition('openstack_volume.uid', $account->id());
  }

}

/**
 * Implements hook_entity_operation().
 */
function openstack_entity_operation(EntityInterface $entity) {
  $operations = [];
  $account = \Drupal::currentUser();

  if ($entity->getEntityTypeId() === 'openstack_volume') {
    if ($account->hasPermission('edit any openstack volume')
    || ($account->hasPermission('edit own openstack volume')
    && $account->id() === $entity->getOwner()->id())) {
      if ($entity->getState() === 'available') {
        $operations['attach'] = [
          'title' => t('Attach'),
          'url' => $entity->toUrl('attach-form'),
          'weight' => 20,
        ];
      }
      elseif ($entity->getState() === 'in-use') {
        $operations['detach'] = [
          'title' => t('Detach'),
          'url' => $entity->toUrl('detach-form'),
          'weight' => 20,
        ];
      }
    }

    if ($account->hasPermission('add openstack snapshot')) {
      $operations['create_snapshot'] = [
        'title' => t('Create Snapshot'),
        'url' => Url::fromRoute(
          'entity.openstack_snapshot.add_form',
          [
            'cloud_context' => $entity->getCloudContext(),
            'volume_id' => $entity->getVolumeId(),
          ]
        ),
        'weight' => 21,
      ];
    }
  }
  elseif ($entity->getEntityTypeId() === 'openstack_floating_ip') {
    if ($account->hasPermission('edit any openstack floating ip')
    || ($account->hasPermission('edit own openstack floating ip')
    && $account->id() === $entity->getOwner()->id())) {
      if ($entity->getAssociationId() === NULL) {
        $operations['associate'] = [
          'title' => t('Associate'),
          'url' => $entity->toUrl('associate-form'),
        ];
      }
      else {
        $operations['disassociate'] = [
          'title' => t('Disassociate'),
          'url' => $entity->toUrl('disassociate-form'),
        ];
      }
    }
  }
  elseif ($entity->getEntityTypeId() === 'openstack_snapshot') {
    if ($account->hasPermission('add openstack volume')) {
      $operations['create_volume'] = [
        'title' => t('Create Volume'),
        'url' => Url::fromRoute(
          'entity.openstack_volume.add_form',
          [
            'cloud_context' => $entity->getCloudContext(),
            'snapshot_id' => $entity->getSnapshotId(),
          ]
        ),
        'weight' => 20,
      ];
    }
  }
  elseif ($entity->getEntityTypeId() === 'openstack_instance') {
    if ($account->hasPermission('edit any openstack instance')
    || ($account->hasPermission('edit own openstack instance')
    && $account->id() === $entity->getOwner()->id())) {
      if ($entity->getInstanceState() === 'running') {
        $operations['stop'] = [
          'title' => t('Stop'),
          'url' => $entity->toUrl('stop-form'),
          'weight' => 20,
        ];
        $operations['reboot'] = [
          'title' => t('Reboot'),
          'url' => $entity->toUrl('reboot-form'),
          'weight' => 21,
        ];
      }
      elseif ($entity->getInstanceState() === 'stopped') {
        $operations['start'] = [
          'title' => t('Start'),
          'url' => $entity->toUrl('start-form'),
          'weight' => 20,
        ];
      }
    }
  }

  return $operations;
}

/**
 * Implements hook_entity_operation_alter().
 */
function openstack_entity_operation_alter(array &$operations, EntityInterface $entity) {

  if ($entity->getEntityTypeId() === 'openstack_volume') {
    if ($entity->getState() === 'in-use') {
      unset($operations['delete']);
    }
  }

  if ($entity->getEntityTypeId() === 'openstack_floating_ip') {
    $association_id = $entity->getAssociationId();
    if (isset($association_id)) {
      unset($operations['delete']);
    }
  }
}

/**
 * Implements hook_query_TAG_Alter().
 */
function openstack_query_openstack_floating_ip_views_access_alter(AlterableInterface $query) {
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }
  if ($account->hasPermission('view any openstack floating ip')) {
    return;
  }
  else {
    // Add a uid condition.
    $query->condition('openstack_floating_ip.uid', $account->id());
  }

}

/**
 * Function to check if an instance can attach a Floating IP.
 *
 * @param \Instance $instance
 *   The Instance entity.
 *
 * @return bool
 *   True or false depending on if the IP can be attached.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function openstack_can_attach_ip(Instance $instance): bool {
  $can_attach = FALSE;
  $entity_type_manager = \Drupal::entityTypeManager();
  $results = $entity_type_manager->getStorage('openstack_network_interface')
    ->getQuery()
    ->condition('instance_id', $instance->getInstanceId())
    ->notExists('public_ips')
    ->execute();
  if (count($results) > 0) {
    $can_attach = TRUE;
  }
  return $can_attach;
}

/**
 * Helper function to get the available Floating IPs.
 *
 * @param string $cloud_context
 *   The cloud context to query from.
 *
 * @return array|bool|int
 *   Returns array of Floating IP IDs or false if no found.
 */
function openstack_get_available_floating_ips($cloud_context) {
  $entity_type_manager = \Drupal::entityTypeManager();
  return $entity_type_manager->getStorage('openstack_floating_ip')
    ->getQuery()
    ->condition('cloud_context', $cloud_context)
    ->notExists('association_id')
    ->execute();
}

/**
 * Notify instance owners and admins.
 *
 * Notify instance owners if their instances
 * have been running for too long.
 */
function openstack_notify_instance_owners_and_admins() {
  // @TODO: Add implementation when necessary.
}

/**
 * Notify a list of emails of unused EBS volumes.
 */
function openstack_notify_unused_volumes_owners_and_admins() {
  // @TODO: Add implementation when necessary.
}

/**
 * Notifies a list of emails of unused EBS snapshots.
 */
function openstack_notify_unused_snapshots_owners_and_admin() {
  // @TODO: Add implementation when necessary.
}

/**
 * Implements hook_query_TAG_Alter().
 */
function openstack_query_openstack_instance_views_access_alter(AlterableInterface $query) {
  if (!$account = $query->getMetaData('account')) {
    $account = \Drupal::currentUser();
  }
  if ($account->hasPermission('view any openstack instance')) {
    return;
  }
  else {
    // Add a uid condition.
    $query->condition('openstack_instance.uid', $account->id());
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openstack_form_cloud_server_template_openstack_add_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  openstack_form_cloud_server_template_openstack_form_common_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openstack_form_cloud_server_template_openstack_edit_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  openstack_form_cloud_server_template_openstack_form_common_alter($form, $form_state, $form_id);

  // Hide new revision checkbox.
  $form['new_revision']['#access'] = FALSE;

  // Disable name field.
  $form['instance']['name']['#disabled'] = TRUE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openstack_form_cloud_server_template_openstack_copy_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  openstack_form_cloud_server_template_openstack_form_common_alter($form, $form_state, $form_id);

  // Change name for copy.
  $name = $form['instance']['name']['widget'][0]['value']['#default_value'];
  $form['instance']['name']['widget'][0]['value']['#default_value'] = t('copy_of_@name',
    [
      '@name' => $name,
    ]);

  // Hide new revision checkbox.
  $form['new_revision']['#access'] = FALSE;

  // Clear the revision log message.
  $form['others']['revision_log_message']['widget'][0]['value']['#default_value'] = NULL;

  // Change value of the submit button.
  $form['actions']['submit']['#value'] = t('Copy');

  // Delete the delete button.
  $form['actions']['delete']['#access'] = FALSE;

  // Overwrite function ::save.
  $form['actions']['submit']['#submit'][1] = 'openstack_form_cloud_server_template_openstack_copy_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openstack_form_cloud_server_template_openstack_delete_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#submit'] = ['openstack_form_cloud_server_template_openstack_delete_form_submit'];
}

/**
 * Submit function for form cloud_server_template_openstack_delete_form.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function openstack_form_cloud_server_template_openstack_delete_form_submit(array $form, FormStateInterface $form_state) {
  $server_template = $form_state
    ->getFormObject()
    ->getEntity();
  $cloud_context = $server_template->getCloudContext();

  $server_template->delete();

  \Drupal::service('cloud')->processOperationStatus($server_template, 'deleted');

  $form_state->setRedirect(
    'entity.cloud_server_template.collection',
    [
      'cloud_context' => $cloud_context,
    ]
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openstack_form_cloud_server_template_openstack_launch_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  /* @var \Drupal\cloud\Entity\CloudServerTemplate $cloud_server_template */
  $cloud_server_template = \Drupal::routeMatch()->getParameter('cloud_server_template');
  $cloud_context = \Drupal::routeMatch()->getParameter('cloud_context');

  $form['automation'] = [
    '#type' => 'details',
    '#title' => t('Automation'),
    '#open' => TRUE,
  ];

  $form['automation']['description'] = $form['description'];
  unset($form['description']);

  $form['automation']['termination_protection'] = [
    '#type' => 'checkbox',
    '#title' => t('Termination Protection'),
    '#description' => t('Indicates whether termination protection is enabled. If enabled, this instance cannot be terminated using the console, API, or CLI until termination protection is disabled.'),
    '#default_value' => $form_state->getFormObject()->getEntity()->get('field_termination_protection')->value === '1',
  ];

  $config = \Drupal::config('openstack.settings');
  $form['automation']['terminate'] = [
    '#type' => 'checkbox',
    '#title' => t('Automatically terminate instance'),
    '#description' => t('Terminate instance automatically.  Specify termination date in the date picker below.'),
    '#default_value' => $config->get('openstack_instance_terminate'),
  ];

  // @TODO: make 30 days configurable
  $form['automation']['termination_date'] = [
    '#type' => 'datetime',
    '#title' => t('Termination Date'),
    '#description' => t('The default termination date is 30 days into the future.'),
    '#default_value' => DrupalDateTime::createFromTimestamp(time() + 2592000),
  ];

  /* @var \Drupal\cloud\Entity\CloudServerTemplate $cloud_server_template */
  $cloud_server_template = \Drupal::routeMatch()->getParameter('cloud_server_template');

  if ($cloud_server_template->get('field_instance_shutdown_behavior')->value === 'terminate') {
    // Add a warning message setting a schedule will terminate the instance,
    // since the shutdown behavior is terminate.
    $form['automation']['terminate_message'] = [
      '#markup' => t('Setting a schedule will potentially terminate the instance since the <strong>%text</strong> is set to Terminate',
        ['%text' => 'Instance Shutdown Behavior']),
    ];
  }

  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('cloud_server_template');
  $build = $view_builder->view($cloud_server_template, 'view');
  unset($build['#weight']);
  $build['#pre_render'][] = '\Drupal\aws_cloud\Entity\Ec2\AwsCloudViewBuilder::reorderServerTemplate';
  $form['detail'] = $build;

  $form['#validate'][] = 'openstack_form_cloud_server_template_openstack_launch_form_validate';
}

/**
 * Validate function for form cloud_server_template_openstack_copy_form.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function openstack_form_cloud_server_template_openstack_copy_form_validate(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  $server_template = $form_object->getEntity();
  $server_template->setName($form_state->getValue('copy_server_template_name'));
  $violations = $server_template->validate();
  foreach ($violations->getByField('name') ?: [] as $violation) {
    $form_state->setErrorByName('copy_server_template_name', $violation->getMessage());
  }
}

/**
 * Submit function for form cloud_server_template_openstack_copy_form.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function openstack_form_cloud_server_template_openstack_copy_form_submit(array $form, FormStateInterface $form_state) {
  $server_template = $form_state
    ->getFormObject()
    ->getEntity();

  $ec2_service = \Drupal::service('openstack.ec2');
  $cloud_context = $server_template->getCloudContext();
  $ec2_service->setCloudContext($cloud_context);

  $server_template = $server_template->createDuplicate();
  $form_state->getFormObject()->setEntity($server_template);
  $server_template->save();

  \Drupal::service('cloud')->processOperationStatus($server_template, 'created');

  $form_state->setRedirect(
    'entity.cloud_server_template.canonical',
    [
      'cloud_context' => $cloud_context,
      'cloud_server_template' => $server_template->id(),
    ]
  );
}

/**
 * Validate function for form cloud_server_template_openstack_launch_form.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function openstack_form_cloud_server_template_openstack_launch_form_validate(array &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('terminate') && $form_state->getValue('termination_protection')) {
    $form_state->setErrorByName(
      'terminate',
      t('"@name1" and "@name2" can\'t be selected both. Please unselect one of them.',
        [
          '@name1' => t('Termination Protection'),
          '@name2' => t('Automatically terminate instance'),
        ]
      )
    );
  }
}

/**
 * Return orders of OpenStack cloud server template fields.
 *
 * @param bool $include_name
 *   Whether to include name field or not.
 *
 * @return array
 *   Fieldsets array.
 */
function openstack_server_template_field_orders($include_name = TRUE) {
  $fieldsets_def = [
    [
      'name' => 'instance',
      'title' => t('Instance'),
      'open' => TRUE,
      'fields' => [
        'name',
        'field_description',
        'field_instance_type',
        'field_min_count',
        'field_max_count',
        'field_test_only',
      ],
    ],
    [
      'name' => 'ami',
      'title' => t('AMI'),
      'open' => TRUE,
      'fields' => [
        'field_openstack_image_id',
        'field_kernel_id',
        'field_ram',
      ],
    ],
    [
      'name' => 'network',
      'title' => t('Network'),
      'open' => TRUE,
      'fields' => [
        'field_os_availability_zone',
        'field_openstack_vpc',
        'field_openstack_subnet',
        'field_openstack_security_group',
        'field_openstack_ssh_key',
        'field_openstack_network',
      ],
    ],
    [
      'name' => 'tags',
      'title' => t('Tags'),
      'open' => TRUE,
      'fields' => [
        'field_tags',
      ],
    ],
    [
      'name' => 'options',
      'title' => t('Options'),
      'open' => TRUE,
      'fields' => [
        'field_instance_shutdown_behavior',
        'field_termination_protection',
        'field_monitoring',
        'field_user_data',
      ],
    ],
    [
      'name' => 'others',
      'title' => t('Others'),
      'open' => FALSE,
      'fields' => [
        'revision_log_message',
        'cloud_context',
        'uid',
      ],
    ],
  ];

  if (!$include_name) {
    unset($fieldsets_def[0]['fields'][0]);
  }

  return $fieldsets_def;
}

/**
 * Get launch template data from a cloud server template.
 *
 * @param \Drupal\cloud\Entity\CloudServerTemplate $server_template
 *   The cloud server template entity.
 *
 * @return array
 *   An array of template data.
 */
function openstack_get_launch_template_data(CloudServerTemplate $server_template) {

  $template_data = [];

  try {

    $vpc_id = $server_template->field_openstack_vpc->value;

    if ($server_template->field_instance_type->value) {
      $template_data['InstanceType'] = $server_template->field_instance_type->value;
    }
    if (empty($server_template->get('field_openstack_image_id')->value)) {
      \Drupal::messenger()->addError(t('The Image ID cannot be empty. Please specify an Image.', [
        '@name' => $server_template->getName(),
      ]));
      return NULL;
    }
    if ($server_template->field_openstack_image_id->value) {
      $template_data['ImageId'] = $server_template->field_openstack_image_id->value;
    }
    if ($server_template->field_kernel_id->value) {
      $template_data['KernelId'] = $server_template->field_kernel_id->value;
    }
    if ($server_template->field_ram->value) {
      $template_data['RamdiskId'] = $server_template->field_ram->value;
    }

    $template_data['SecurityGroupIds'] = [];
    foreach ($server_template->get('field_openstack_security_group') ?: [] as $group) {
      if (isset($group->entity)
        && $vpc_id !== NULL
        && $vpc_id === $group->entity->getVpcId()) {
        $template_data['SecurityGroupIds'][] = $group->entity->getGroupId();
      }
    }

    $template_data['KeyName'] = $server_template->field_openstack_ssh_key->entity->getKeyPairName();
    if ($server_template->field_openstack_network->entity) {
      $template_data['NetworkInterfaces'][] = [
        'NetworkInterfaceId' => $server_template->field_openstack_network->entity->getNetworkInterfaceId(),
      ];
    }

    if ($server_template->field_instance_shutdown_behavior->value) {
      $template_data['InstanceInitiatedShutdownBehavior'] = $server_template->field_instance_shutdown_behavior->value;
    }
    $template_data['DisableApiTermination'] = $server_template->field_termination_protection->value === 1;
    $template_data['Monitoring']['Enabled'] = $server_template->field_monitoring->value === 1;
    $template_data['UserData'] = base64_encode($server_template->field_user_data->value);

    // Add tags from the template.
    $tags_map = [];
    foreach ($server_template->field_tags ?: [] as $tag_item) {
      $tags_map[$tag_item->getItemKey()] = $tag_item->getItemValue();
    }

    $tags_map[CloudServerTemplate::TAG_MIN_COUNT] = $server_template->field_min_count->value;
    $tags_map[CloudServerTemplate::TAG_MAX_COUNT] = $server_template->field_max_count->value;
    $tags_map[CloudServerTemplate::TAG_TEST_ONLY] = $server_template->field_test_only->value;
    $tags_map[CloudServerTemplate::TAG_AVAILABILITY_ZONE] = $server_template->field_os_availability_zone->value;
    $tags_map[CloudServerTemplate::TAG_VPC] = $server_template->field_openstack_vpc->value;
    $tags_map[CloudServerTemplate::TAG_SUBNET] = $server_template->field_openstack_subnet->value;
    $tags_map[CloudServerTemplate::TAG_CREATED_BY_UID] = $server_template->getOwner()
      ->id();
    $tags_map[CloudServerTemplate::TAG_DESCRIPTION] = $server_template->field_description->value;

    $tags = [];
    foreach ($tags_map ?: [] as $item_key => $item_value) {
      $tags[] = [
        'Key' => $item_key,
        'Value' => $item_value,
      ];
    }

    $template_data['TagSpecifications'][] = [
      'ResourceType' => 'instance',
      'Tags' => $tags,
    ];
  }
  catch (\Exception $e) {
    \Drupal::service('cloud')->handleException($e);
  }

  return $template_data;
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function openstack_entity_type_alter(array &$entity_types) {
  // Add aws constraint to cloud_server_template.
  // This constraint will perform OpenStack specific validations.
  $entity_types['cloud_server_template']->addConstraint('AWSConstraint');
}

/**
 * Implements hook_queue_info_alter().
 */
function openstack_queue_info_alter(&$queues) {
  $config = \Drupal::config('openstack.settings');
  if (!empty($queues['openstack_update_resources_queue'])) {
    $queues['openstack_update_resources_queue']['cron']['time'] = $config->get('openstack_update_resources_queue_cron_time');
  }
}
