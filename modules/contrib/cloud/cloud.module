<?php

/**
 * @file
 * Enables users to access the Privately managed clouds.
 *
 * Provides common functionality for cloud management.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Locale\CountryManager;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function cloud_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.cloud':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The cloud module creates a user interface for users to manage clouds. Users can Create Instances,  Describe Instances etc.') . '</p>';
      $output .= '<p>' . t('For more information, see the <a href=":cloud_documentation">online documentation for the Cloud module</a>.', [':cloud_documentation' => 'https://www.drupal.org/docs/8/modules/cloud']) . '</p>';
      return $output;

    case 'help.page.cloud_server_template':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The launch template (a.k.a. cloud server template) module creates a user interface for users to manage clouds. Users can create launch templates.') . '</p>';
      $output .= '<p>' . t('For more information, see the <a href=":cloud_documentation">online documentation for the Cloud module</a>.', [':cloud_documentation' => 'https://www.drupal.org/docs/8/modules/cloud']) . '</p>';
      return $output;

    default:
      return '';
  }
}

/**
 * Implements hook_theme().
 */
function cloud_theme() {
  $theme = [];
  $theme['cloud_config'] = [
    'render element' => 'elements',
    'file' => 'cloud_config.page.inc',
    'template' => 'cloud_config',
  ];
  $theme['cloud_config_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'cloud_config.page.inc',
  ];
  $theme['cloud_server_template'] = [
    'render element' => 'elements',
    'file' => 'cloud_server_template.page.inc',
    'template' => 'cloud_server_template',
  ];
  $theme['cloud_server_template_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'cloud_server_template.page.inc',
  ];
  return $theme;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function cloud_theme_suggestions_cloud_config(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#cloud_config'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'cloud_config__' . $sanitized_view_mode;
  $suggestions[] = 'cloud_config__' . $entity->bundle();
  $suggestions[] = 'cloud_config__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'cloud_config__' . $entity->id();
  $suggestions[] = 'cloud_config__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function cloud_theme_suggestions_cloud_server_template(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#cloud_server_template'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'cloud_server_template__' . $sanitized_view_mode;
  $suggestions[] = 'cloud_server_template__' . $entity->bundle();
  $suggestions[] = 'cloud_server_template__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'cloud_server_template__' . $entity->id();
  $suggestions[] = 'cloud_server_template__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_views_pre_render().
 *
 * This is a workaround to implement row level access control,
 * until this issue is resolved:
 * https://www.drupal.org/project/entity/issues/2909970
 * Loop through the results,
 * and call hasPermissions() with the entity's cloud_context.
 * Unset the entity if the user does not have permissions.
 */
function cloud_views_pre_render(ViewExecutable $view) {
  $account = \Drupal::currentUser();
  if ($view->id() === 'cloud_config' || $view->id() === 'cloud_server_template') {
    foreach ($view->result ?: [] as $key => $result) {
      /* @var \Drupal\cloud\Entity\CloudConfigInterface $cloud */
      $cloud = $result->_entity;
      if (!$account->hasPermission('view ' . $cloud->getCloudContext())
        && !$account->hasPermission('view all cloud service providers')) {
        unset($view->result[$key]);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Hook for form views_form_cloud_config_*.
 */
function cloud_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (strpos($form_id, 'views_form_cloud_config_') === 0) {
    $form['#submit'][] = 'cloud_config_bulk_form_submit';
  }

  if (strpos($form_id, 'cloud_config_') === 0
    && (strpos($form_id, 'add_form') !== FALSE || strpos($form_id, 'edit_form') !== FALSE)) {

    $path = \Drupal::service('router.route_provider')->getRouteByName('entity.cloud_config.geocoder')->getPath();
    $path = str_replace('{country}', 'country', $path);
    $path = str_replace('{city}', 'city', $path);
    $url = Url::fromUri('internal:' . $path);
    $form['#attached']['library'] = 'cloud/cloud_geocoder';
    $form['#attached']['drupalSettings']['cloud']['geocoder_url'] = $url->toString();

  }
}

/**
 * Submit function for form views_form_cloud_config_list.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function cloud_config_bulk_form_submit(array $form, FormStateInterface $form_state) {
  $form_state->setRedirect(
    'entity.cloud_config.delete_multiple_form', [
      'cloud_config' => 'cloud_config',
    ]
  );
}

/**
 * Submit function for form views_form_cloud_*.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function cloud_views_bulk_form_submit(array $form, FormStateInterface $form_state) {

  $request = \Drupal::service('request_stack')->getCurrentRequest();

  $action = $form_state->getValue('action');

  // Get entity_type and operation name.
  // $action - Format: '{entity_type}_{operation}_action'.
  preg_match('/^(.+)_(.+)_action/', $action, $matches);
  $entity_type = $matches[1];
  $operation = $matches[2];
  // Change the confirm form.
  // Format: 'entity.{entity_type}.{operation}_multiple_form'.
  $form_state->setRedirect(
    "entity.${entity_type}.${operation}_multiple_form", [
      'cloud_context' => $request->get('cloud_context'),
    ]
  );
}

/**
 * Implements hook_entity_view_alter().
 */
function cloud_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  $build['#attached']['library'][] = 'cloud/cloud_view_builder';
}

/**
 * Implements hook_preprocess_views_view().
 */
function cloud_preprocess_views_view(array &$variables) {
  $view = $variables['view'];
  if ($view->ajaxEnabled() && empty($view->is_attachment) && empty($view->live_preview)) {
    // @TODO https://www.drupal.org/project/drupal/issues/2866386
    $view->element['#attached']['drupalSettings']['views']['ajaxViews']['views_dom_id:' . $view->dom_id]['view_path']
      = \Drupal::routeMatch()->getRouteName() === 'views.ajax'
        ? \Drupal::service('path.current')->getPath()
        : Html::escape(Url::fromRoute('<current>')->toString());
  }
}

/**
 * Implements hook_library_info_alter().
 */
function cloud_library_info_alter(&$libraries, $extension) {

  if ($extension === 'cloud') {
    $config = \Drupal::configFactory()->getEditable('cloud.settings');
    $source = $config->get('cloud_use_default_urls');

    if (empty($source)) {
      $libraries['d3']['js'] = [];
      $libraries['c3']['js'] = [];
      $libraries['c3']['css']['theme'] = [];
      $libraries['chartjs']['js'] = [];
      $libraries['select2']['js'] = [];
      $libraries['select2']['css']['theme'] = [];

      $libraries['d3']['js'][trim($config->get('cloud_custom_d3_js_url'))] = [];
      $libraries['c3']['js'][trim($config->get('cloud_custom_c3_js_url'))] = [];
      $libraries['c3']['css']['theme'][trim($config->get('cloud_custom_c3_css_url'))] = [];
      $libraries['chartjs']['js'][trim($config->get('cloud_custom_chart_js_url'))] = [];
      $libraries['select2']['js'][trim($config->get('cloud_custom_select2_js_url'))] = [];
      $libraries['select2']['css']['theme'][trim($config->get('cloud_custom_select2_css_url'))] = [];
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function cloud_preprocess_page(array &$variables) {
  $route = \Drupal::routeMatch()->getRouteObject();
  if ($route) {
    $view_id = $route->getDefault('view_id');
    if ($view_id && $view_id === 'cloud_config') {
      $block_manager = \Drupal::service('plugin.manager.block');
      $config = ['not_display_cloud_config_page' => TRUE];
      $plugin_block = $block_manager->createInstance('cloud_config_location', $config);
      $render = $plugin_block->build();
      $variables['page']['content'] = [$render, $variables['page']['content']];
    }
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function cloud_field_widget_form_alter(&$element, FormStateInterface $form_state, array $context) {
  // This hook can only modify individual elements within a field widget and
  // cannot alter the top level (parent element) for multi-value fields. In most
  // cases, you should use hook_field_widget_multivalue_form_alter() instead and
  // loop over the elements.
  $field_definition = $context['items']->getFieldDefinition();
  $settings = $field_definition->getSettings();
  if ($field_definition->getName() === 'field_location_latitude' || $field_definition->getName() === 'field_location_longitude') {
    // @TODO Prevents validation of decimal numbers.
    // @see https://www.drupal.org/node/2230909
    $element['value']['#step'] = 'any';
    $element['value']['#scale'] = $settings['scale'];
  }
}

/**
 * Implements hook_preprocess_input__number().
 */
function cloud_preprocess_input__number(array &$variables) {
  $element = &$variables['element'];
  if (strpos($element['#name'], 'field_location_latitude') !== FALSE
    || strpos($element['#name'], 'field_location_longitude') !== FALSE
    || strpos($element['#name'], 'aws_cloud_region_locations') !== FALSE) {
    // @TODO Enable the validation only on the browser for step settings.
    // @see https://www.drupal.org/node/2230909
    $scale = $element['#scale'];
    $variables['attributes']['step'] = pow(0.1, $scale);
  }
}

/**
 * Set dynamic allowed values for the location country field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function cloud_location_country_allowed_values_function(FieldStorageConfig $definition = NULL, ContentEntityInterface $entity = NULL, $cacheable = FALSE): array {
  return CountryManager::getStandardList();
}

/**
 * Implements hook_modules_installed().
 */
function cloud_modules_installed($modules) {
  if (!in_array('geocoder', $modules)) {
    return;
  }
  // Initialize the geocoder provider.
  $cloud_service = Drupal::getContainer()->get('cloud');
  $cloud_service->initGeocoder();
}
