diff --git a/modules/contrib/flag/tests/src/Kernel/FlagActionTest.php b/modules/contrib/flag/tests/src/Kernel/FlagActionTest.php
index 2965365..7480509 100644
--- a/modules/contrib/flag/tests/src/Kernel/FlagActionTest.php
+++ b/modules/contrib/flag/tests/src/Kernel/FlagActionTest.php
@@ -5,6 +5,7 @@
 use Drupal\entity_test\Entity\EntityTest;
 use Drupal\flag\Entity\Flag;
 use Drupal\flag\Plugin\Action\DeleteFlaggingAction;
+use Drupal\Tests\migrate\Unit\process\CallbackTest;
 
 /**
  * Test flag actions are added/removed when flags are added/deleted.
@@ -88,7 +89,7 @@ public function testFlagActionsCreation() {
   public function testFlagActions() {
     /** @var \Drupal\flag\FlagInterface $entity_flag */
     $entity_flag = Flag::create([
-      'id' => mb_strtolower($this->randomMachineName()),
+      'id' => strToLower($this->randomMachineName()),
       'label' => $this->randomString(),
       'entity_type' => 'entity_test',
       'flag_type' => 'entity:entity_test',
@@ -140,7 +141,7 @@ public function testFlaggingDeleteAction() {
 
     /** @var \Drupal\flag\FlagInterface $entity_flag */
     $entity_flag = Flag::create([
-      'id' => mb_strtolower($this->randomMachineName()),
+      'id' => strToLower($this->randomMachineName()),
       'label' => $this->randomString(),
       'entity_type' => 'entity_test',
       'flag_type' => 'entity:entity_test',
diff --git a/modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php b/modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php
index 4e7b714..b844ea0 100644
--- a/modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php
+++ b/modules/contrib/flag/tests/src/Unit/Plugin/Action/FlagActionTest.php
@@ -10,6 +10,7 @@
 use Drupal\flag\Plugin\Action\FlagAction;
 use Drupal\Tests\UnitTestCase;
 use Drupal\user\UserInterface;
+use Drupal\Tests\migrate\Unit\process\CallbackTest;
 
 /**
  * Unit tests for the flag action plugin.
@@ -34,7 +35,7 @@ protected function setUp() {
     parent::setUp();
 
     $flag = $this->prophesize(FlagInterface::class);
-    $flag->id()->willReturn(mb_strtolower($this->randomMachineName()));
+    $flag->id()->willReturn(strToLower($this->randomMachineName()));
     $this->flag = $flag->reveal();
   }
 
@@ -79,7 +80,7 @@ public function testAccess() {
     $entity = $this->prophesize(EntityInterface::class)->reveal();
     $account = $this->prophesize(UserInterface::class)->reveal();
     $flag = $this->prophesize(FlagInterface::class);
-    $flag->id()->willReturn(mb_strtolower($this->randomMachineName()));
+    $flag->id()->willReturn(strToLower($this->randomMachineName()));
     $denied = $this->prophesize(AccessResultForbidden::class);
     $denied->isAllowed()->willReturn(FALSE);
     $denied = $denied->reveal();
@@ -98,7 +99,7 @@ public function testAccess() {
 
     // Test access allowed.
     $flag = $this->prophesize(FlagInterface::class);
-    $flag->id()->willReturn(mb_strtolower($this->randomMachineName()));
+    $flag->id()->willReturn(strToLower($this->randomMachineName()));
     $allowed = $this->prophesize(AccessResult::class);
     $allowed->isAllowed()->willReturn(TRUE);
     $allowed = $allowed->reveal();
